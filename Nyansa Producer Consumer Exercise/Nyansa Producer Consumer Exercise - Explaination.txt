 Instruction
---------------

The goal is to identify a crashing or exception bug and provide a fix in the following pseudo code. There is a single producer and multiple consumers. The producer puts items on the queue, while the consumers remove items from queue and process them. condition.signal() will wake up one of the blocked consumers waiting on the condition. While waiting in blocked state, wait() will release the mutex. Upon receiving the signal, wait() will unblock and re-acquire the mutex. There are sufficient consumers to process the items where the queue will not build up. Context switch can occur anywhere in the code. Please describe how the bug can occur and provide a fix. 

Producer
while (true) {
       item = generate_item()
       mutex.lock()
       fifo_queue.push(item)
       mutex.unlock()
       condition.signal()
}

Consumers
while(true) {
       mutex.lock()
       if (fifo_queue.empty()) {
             condition.wait(mutex)
       }
       item = fifo_queue.remove()
       mutex.unlock()
       process_item(item)
}


Problem:
--------


This code will lead to a race condition. Suppose there are 2 consumers A, and B. 

The producer pushes an item and unlocks the mutex.
Now before Producer sends condition.signal(), contex switch can happen  to either A or B, which will aquire the mutex.lock().

Suppose, Consumer A gets context and mutex and process_item(item). 
At this moment, its possible that context switch happens and Producer can gets the context now to execute condition.signal().

Now, if Consumer B gets the context and tries to fifo_queue.remove() on a possibly empty queue(), leading to a race condition.


Solution: 
-------- 

Add a continues check instead of "if (fifo_queue.empty())" for consumer code by adding a while loop. 

Consumers
while(true) {
       mutex.lock()
       //continues check for queue being empty before removing the item       
       while (fifo_queue.empty()) {
             condition.wait(mutex)
       }
       item = fifo_queue.remove()
       mutex.unlock()
       process_item(item)
}


